//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  stripeCustomerId  String?
  status            UserStatus         @default(VERIFIED)
  globalRole        String             @default("USER")
  /// @password
  /// @omit
  password          String?
  dateCreated       DateTime           @default(now())
  dateUpdated       DateTime           @default(now()) @updatedAt()
  organizationRoles OrganizationRole[]
  pwaSubscriptions  PwaSubscription[]  @relation("user")
  notebooks         Notebook[]         @relation("user")
  boards            Board[]            @relation("user")
  tasksAsAssignee   Task[]             @relation("assignee")
  notifications     Notification[]     @relation("user")
}

/// @@allow('all', true)
model Media {
  id          String      @id() @default(uuid())
  mediaUrl    String?
  type        String?
  noteMedias  NoteMedia[] @relation("media")
  taskMedias  TaskMedia[] @relation("media")
  dateCreated DateTime    @default(now())
  dateUpdated DateTime    @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Notebook {
  id          String   @id() @default(uuid())
  name        String?
  description String?
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  notes       Note[]   @relation("notebook")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Board {
  id          String   @id() @default(uuid())
  name        String?
  description String?
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  tasks       Task[]   @relation("board")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Note {
  id          String      @id() @default(uuid())
  title       String?
  content     String?
  notebookId  String
  notebook    Notebook?   @relation(fields: [notebookId], references: [id], name: "notebook")
  noteMedias  NoteMedia[] @relation("note")
  dateCreated DateTime    @default(now())
  dateUpdated DateTime    @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Task {
  id          String      @id() @default(uuid())
  title       String?
  description String?
  status      String?
  boardId     String
  board       Board?      @relation(fields: [boardId], references: [id], name: "board")
  assigneeId  String?
  assignee    User?       @relation(fields: [assigneeId], references: [id], name: "assignee")
  taskMedias  TaskMedia[] @relation("task")
  dateCreated DateTime    @default(now())
  dateUpdated DateTime    @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Notification {
  id          String   @id() @default(uuid())
  content     String?
  isRead      Boolean
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model NoteMedia {
  noteId      String
  note        Note?    @relation(fields: [noteId], references: [id], name: "note")
  mediaId     String
  media       Media?   @relation(fields: [mediaId], references: [id], name: "media")
  id          String   @id() @default(uuid())
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model TaskMedia {
  taskId      String
  task        Task?    @relation(fields: [taskId], references: [id], name: "task")
  mediaId     String
  media       Media?   @relation(fields: [mediaId], references: [id], name: "media")
  id          String   @id() @default(uuid())
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id               String             @id() @default(uuid())
  name             String
  pictureUrl       String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId String?
  dateCreated      DateTime           @default(now())
  dateUpdated      DateTime           @default(now()) @updatedAt()
  roles            OrganizationRole[]
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  dateCreated    DateTime     @default(now())
  dateUpdated    DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@allow('all', true)
model PwaSubscription {
  id          String   @id() @default(uuid())
  content     String
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
  userId      String
  user        User     @relation(fields: [userId], references: [id], name: "user")
}
